1.把信息塞入名字中
	使用专业的单词，例如不用Get，而用Fetch、Download更好
	避免空泛的名字，像tmp，retval，除非使用它们有特殊的理由，例如泛型swap中临时变量。
	使用具体的名字更细致地描述事物，ServerCanStart 比 CanListenOnPort更模糊。
	给变量名带上重要的细节，例如带上单位_ms,或者在未处理的变量前面加上raw_。
	为作用域大的名字采用更长的名字，屏幕有限对于几屏之间都可见的变量名要易于理解，只存在几行之间的变量用短一点的名字更好。
	有目的地使用大小写，下划线等。类成员、局部变量后面加上_区分。。。
2.审美
	使用一致布局，让读者很快习惯这种风格
	让相似的代码看上去相似
	把相关的代码行分组，形成代码块
	
	一致的风格比正确的风格更加重要！
	注释的目的是尽量帮助读者了解得和作者一样多。
	不要为那些从代码本身就能快速推断带事实写注释。

3. 把控制流变得更加易读
	比较语句：变量左，常量右
	
	if／else 先处理正确，简单，易读达情况，通常是这样。
	某些编程结构，三目运算符，do－while，goto通常会导致代码的可读性变差，最好别用。
	do 
	{
		continue;	//  循环只执行一次
	}while (a)

	嵌套代码，每层嵌套都需要读者把更多的上下文“压入栈”。应该把它们改成更加线性的代码。
	
	通常提早返回可以减少嵌套代码并让代码整洁，“保护语句”尤其有用。

4. 拆分超长的表达式
	
	拆分长表达式，引入解释、总结类型变量，但是有一种例外：switch case中不能定义变量，
	((layer*)ptr)->get_ref( ( ((layer*)ptr)->get_param() ) = 5;

	拆分长表达式，遵循DRY原则，寻找相同的模式，通过函数、模版、宏层面优化。
